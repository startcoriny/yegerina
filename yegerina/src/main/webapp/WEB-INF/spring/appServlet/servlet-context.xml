<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<!-- 주요 애노테이션을 자동으로 등록하도록 설정하는 XML 요소 -->
	<!-- @RequestMapping, @GetMapping, @PostMapping 등과 같은 URL 매핑 애노테이션을 사용하여 요청과 메서드를 매핑 -->
	<!-- @ModelAttribute, @RequestBody, @ResponseBody 등과 같은 데이터 바인딩 애노테이션을 사용하여 데이터를 객체로 바인딩하거나 응답을 객체로 변환 -->
	<!-- XML 설정 파일에 많은 번거로운 설정을 간소화할 수 있으며, 대부분의 경우 애노테이션만으로 웹 애플리케이션을 개발 -->
	
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the $webappRoot/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- Spring MVC에서 정적 리소스(이미지, CSS 파일, JavaScript 파일 등)의 처리를 위한 설정 -->
	<!-- 클라이언트에서 요청하는 URL 패턴이 "/resources/"로 시작하는 경우에 해당 리소스를 서비스하기 위해 사용 -->


    <beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
    <!-- Tiles 템플릿 엔진을 사용하기 위한 설정 -->
    <!-- Tiles는 레이아웃을 구성하기 위해 타일(조각)로 구성된 템플릿을 사용하는 뷰 처리 방식을 제공하는 프레임워크 -->
    <!-- TilesConfigurer 빈을 정의 -->
    <!-- Tiles 템플릿 엔진과 관련된 설정들을 담당 -->
    
		<beans:property name="definitions">
		<!-- TilesConfigurer의 definitions 속성을 설정 -->
		<!-- Tiles의 타일 정의 파일들을 설정하는데 사용 -->
			<beans:list>
			<!-- definitions 속성에 리스트 형태로 타일 정의 파일들의 경로를 지정 -->
				<beans:value>classpath:tiles/*.xml</beans:value>
				<!-- 클래스패스(classpath)를 기준으로 "tiles/" 디렉토리에 위치한 모든 XML 파일을 타일 정의 파일로 지정 -->
				<!-- 해당 경로에 있는 모든 타일 정의 파일들이 Tiles 설정에 사용 -->
				
			</beans:list>
		</beans:property>
		<beans:property name="preparerFactoryClass" value="org.springframework.web.servlet.view.tiles2.SpringBeanPreparerFactory" />
		<!-- TilesConfigurer의 preparerFactoryClass 속성을 설정 -->
		<!-- 타일에서 사용할 뷰 전처리기(Preparer) 팩토리 클래스를 지정 -->
		<!-- Spring의 Bean을 사용하는 SpringBeanPreparerFactory를 지정하여 뷰 전처리기를 설정 -->
	</beans:bean>
	
	
	
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	<!-- 뷰 리졸버를 설정 -->
	<!-- URL 패턴을 사용하여 뷰를 해석하고 반환하는 데 사용 -->
	<!-- 뷰 리졸버는 컨트롤러에서 반환하는 뷰 이름을 기반으로 실제 뷰를 찾아서 사용할 뷰 객체로 변환하는 역할 -->
	<!-- 컨트롤러에서 반환한 뷰 이름과 Tiles 템플릿 엔진이 관리하는 타일 정의 파일들을 사용하여 최종적으로 뷰를 결정 -->
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView" />
		<!-- 뷰 리졸버의 viewClass 속성을 설정 -->
		<!-- 뷰 리졸버가 반환하는 뷰를 TilesView로 설정하면 -->
		<!-- TilesView를 사용하여 Tiles 템플릿 엔진을 활성화하고 뷰를 해석 -->
	</beans:bean>
	
	
	
    <context:component-scan	base-package="com.jimini.yegerina" />
    <!-- @Component 어노테이션이 지정된 클래스를 스캔하여 해당 패키지(com.myShoppingmall)에 있는 빈들을 자동으로 등록 -->
    <!-- 핸들러는 아니지만 핸들러의 역할을 함. -->
    
    
    <mvc:interceptors>
    <!-- 인터셉터 설정을 정의 -->
    <!-- 클라이언트의 요청을 가로채서 처리하는 역할 -->
    	<mvc:interceptor>
	      <mvc:mapping path="/*/*.do"/>
		  <mvc:mapping path="/*/*/*.do"/> 
	      <!-- 인터셉터가 적용될 URL 패턴을 설정 -->
	      <!--  "//.do" 패턴의 URL에 대해서 인터셉터를 실행 -->
	      
	   	  <beans:bean class="com.jimini.yegerina.common.interceptor.ViewNameInterceptor" />
	   	  <!-- ViewNameInterceptor 클래스를 인터셉터로 등록 -->
	   	  <!-- 컨트롤러가 실행되기 전에 뷰 이름을 로그에 출력하는 역할 -->
		</mvc:interceptor>
	</mvc:interceptors>




	<!-- 멀티파트 리졸버 -->
	<beans:bean id="multipartResolver" 	class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 파일 업로드와 같은 멀티파트 요청을 처리하기 위해 사용되는 빈(Bean) -->
		
		<!-- enctype="multipart/form-data"를 설정하여 파일 업로드를 지원하는 경우, 클라이언트는 멀티파트 요청을 생성 -->
		<beans:property name="maxUploadSize" value="52428800" />
		<!-- 최대 업로드 가능한 파일 크기를 설정 -->
		<!--  52428800바이트(50MB)로 설정 -->
		<beans:property name="maxInMemorySize" value="52428800" />
		<!-- 메모리에 보관할 최대 멀티파트 요청 크기를 설정 -->
		<!-- 52428800바이트(50MB)로 설정 -->
		<beans:property name="defaultEncoding" value="utf-8" />
		<!-- 기본 인코딩을 설정 -->
	</beans:bean>
	
</beans:beans>